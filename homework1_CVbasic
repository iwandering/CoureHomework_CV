import cv2
import numpy as np
import matplotlib.pyplot as plt
import random

#######################初始化################################
img = cv2.imread(r"E:\wallhaven-716923.jpg",cv2.IMREAD_UNCHANGED)
# cv2.imshow("haha.jpg",img)

rows, cols, channel = img.shape
type = img.dtype
print(img.shape)
print(img.dtype)
# print(img)
#######################切片################################
def crop(img,x1,x2,y1,y2):
    return img[x1:x2,y1:y2]

#######################分通道随机变色################################
def colorRandomChange(channel):
    channel_random = random.randint(-50,50)
    if channel_random == 0: pass
    if channel_random > 0:
        channel[channel > (255 - channel_random)] = 255
        channel[channel <= (255 - channel_random)] = channel[channel <= (255 - channel_random)] + channel_random
    if channel_random < 0:
        channel[channel < abs(channel_random)] = 0
        channel[channel >= abs(channel_random)] = channel[channel >= abs(channel_random)] + channel_random
    return channel

#######################查表随机变色################################
def colorLUTChange(img):
    table = [random.randint(0,256) for i in range(256)]
    table = np.array(table).astype(img.dtype)
    print(table)
    img = cv2.LUT(img,table)
    cv2.imshow('LUTChange',img)
    return img

#######################直方图################################
def histogram(img):
    hist = cv2.calcHist([img], [0], None, [256], [0, 255])  #计算当前图片
    plt.plot(hist)
    plt.hist(img.flatten(), 256, [0, 255])
    img_hist = cv2.equalizeHist(img[:,:,0])
    plt.show()
    return img_hist





#########################################################
###                    执行部分                      ####
#########################################################

#######################切片################################
# img_crop = crop(img,0,1333,0,2000)
# cv2.imshow("haha2",img_crop)

#######################分通道################################
B, G, R = cv2.split(img)
# cv2.imshow('B_channel', B)
# cv2.imshow('G_channel', G)
# cv2.imshow('R_channel', R)

#######################分通道随机变色################################
# B = colorRandomChange(B)
# G = colorRandomChange(G)
# R = colorRandomChange(R)

#######################查表随机变色################################
# B = colorLUTChange(B)

# img_merge = cv2.merge((B, G, R))
# cv2.imshow("haha_merge.jpg", img_merge)
# cv2.imshow("B",B)
# cv2.imshow("G",G)
# cv2.imshow("R",R)

#######################直方图################################
# img_hist = histogram(img)
# cv2.imshow("haha_hist.jpg", img_hist)

#######################resize用法测试################################
# img1 = cv2.resize(img, (int(img.shape[1]/2), int(img.shape[0]/2)), interpolation=cv2.INTER_NEAREST)
# img2 = cv2.resize(img, (int(img.shape[1]/2), int(img.shape[0]/2)), interpolation=cv2.INTER_LINEAR)
# img3 = cv2.resize(img, (int(img.shape[1]/2), int(img.shape[0]/2)), interpolation=cv2.INTER_AREA)
# img4 = cv2.resize(img, (int(img.shape[1]/2), int(img.shape[0]/2)), interpolation=cv2.INTER_CUBIC)
# img5 = cv2.resize(img, (int(img.shape[1]/2), int(img.shape[0]/2)), interpolation=cv2.INTER_LANCZOS4)
# cv2.imshow("img1", img1)
# cv2.imshow("img2", img2)
# cv2.imshow("img3", img3)
# cv2.imshow("img4", img4)
# cv2.imshow("img5", img5)

#######################Similarity Transform用法测试################################
# M = cv2.getRotationMatrix2D((int(img.shape[1]/2), int(img.shape[0]/2)), 30, 0.5)
# img_rotate = cv2.warpAffine(img, M, (int(img.shape[1]), int(img.shape[0])))
# cv2.imshow('Rotate',img_rotate)

#######################Affine Transform用法测试################################
# pts1 = np.float32([[0, 0], [img.shape[0] - 1, 0], [0, img.shape[1] - 1]])
# pts2 = np.float32([[img.shape[0] * 0.2, img.shape[1] * 0.1], [img.shape[0] * 0.9, img.shape[1] * 0.2], [img.shape[0] * 0.1, img.shape[1] * 0.9]])
# M = cv2.getAffineTransform(pts1, pts2)
# dst = cv2.warpAffine(img, M, (2*img.shape[0], 2*img.shape[1]))
# cv2.imshow('Affine',dst)

#######################Affine Transform用法测试################################
pts1 = np.float32([[0, 0], [0, 1333], [2000, 0], [2000, 1333]])
pts2 = np.float32([[0, 0], [0, 600], [200, 0], [1300, 600]])
M_warp = cv2.getPerspectiveTransform(pts1, pts2)
img_warp = cv2.warpPerspective(img, M_warp, (img.shape[0], img.shape[1]))
cv2.imshow('Warp', img_warp)

key = cv2.waitKey()
if key == 27:
    cv2.destroyAllWindows()
